#include <iostream>
#include <string>
#include <vector>

using namespace std;

void solver(const int &n, const int&m, char outArray[]);

int main()
{
   int n,m;
   int id = 1;
   char outArray[11000];
   while(cin>>n && cin>>m && (n != 0 || m != 0))
   {     
      for(int i=0;i<11000;i+=4)
      {
	 outArray[i]='0';
	 outArray[i+1]='0';
	 outArray[i+2]='0';
	 outArray[i+3]='0';//change this loop to fill, before submit
      }

      if (id > 1) cout << endl;
      cout << "Field #" << id++ << ":" << endl;
      solver(n,m,outArray);
//       cerr <<"escaped Solver" <<endl;

       /*    for(int i=0;i<n*m;i++)
      {
	 cout<<outArray[i];
	 if(i % m == 0)
	    cout<<endl;	 
      }
      cout<<endl;*/
   }

};

//take input, parse strings, put pos of each * into array
//pair consists of a asterisk, and its position in the array


//Add at position +m -m, +(m+1) +(m-1), -(m+1), -(m-1) +1 -1
// (pos mod m) = m-1 is on right side - dont add @ +-(m+1) or +1
// (pos mod m) = 0 is on the left side - dont add @ +-(m-1) or -1
// pos < m; on first row; - dont add @ -m -(m+1) -(m-1)
// pos > n*m - m;  - dont add @ //dont check just dont output.
void solver(const int &n, const int&m, char outArray[])
{
   vector<int> inArray;
   int pos=0;
   string lines;
   cin.ignore(m, '\n');
   for(int i=0;i<n;i++)
   {
      getline(cin,lines);
      
      for(int k=0;k<m;k++)
      {
	 if(lines[k]=='*')
	 {
	    inArray.push_back(pos);
	 }
	    pos++;
	
      }
   }
   int c=0;
   int s[] ={m,-m,m+1,m-1,-m+1,-m-1,1,-1};
   //s 0=Below, Above, BRight, BLeft, ARight, ALeft, right, left
   //APPLY THE PROPER NUMBERING TO THE INPUT
   //I thought these for loops were pretty funny and decided against instinct
   // to use them
   for(int i=0;i<inArray.size();i++)
   {
      c = inArray[i] % m;
      
      if(inArray[i] < m)//still first row
      {	      
	 if(c == 0)//do 0,2,6
	 {	    
	    for(int j = 0;j<8;j=(j*2)+2) outArray[inArray[i]+s[j]]++;
	 }
	 else if(c == m-1)//do 0,3,7
	 {
	    for(int j = 0;j<8;j=(j*1.34)+3) outArray[inArray[i]+s[j]]++;
	 }
	 else//do 0, 2,3,4,5,6,7
	 {
	    for(int j= 0;j<8;j++) if(j!=1 && j != 4 && j != 5) outArray[inArray[i]+s[j]]++;
	 }
      }

      else
      {      
	 outArray[inArray[i]+s[0]]++;
	 outArray[inArray[i]+s[1]]++;
	 //Right Column do 3,5,7
	 if(c == m-1)  for(int j=3;j<8;j+=2) outArray[inArray[i]+s[j]]++;
	 else{
	    switch(c){
	       case 0:{ //Left Column do 2,4,6
		  for(int j=2;j<7;j+=2) outArray[inArray[i]+s[j]]++;
		  break;} 
	       default:{ // EVARAYTHANG after 0,1
		  for(int j=2;j<8;j++) outArray[inArray[i]+s[j]]++;
		  break;}
	    }
	 }
      }
   }
   
   for(int i=0;i<inArray.size();i++)  
      outArray[inArray[i]] = '*';
 
      for(int i=0;i<n*m;i++)
      {
	 cout<<outArray[i];	
	 if(i % m == m-1)
	    cout<<endl;
      }
//      cout<<endl<<"Leaving SOLVER"<<endl;
}
