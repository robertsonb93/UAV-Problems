//Councilling Will utilize network flow algorithm
//In creating the graph, for each party and club, push each onto a set.
//str will keep track of who is with that, but club and set will ensure that
//Parties and clubs are not made multiple times

//Make a structure for each party and push onto it each person?
//Make a structure for each person and push onto it each club? str[0][>1]

#include <string>
#include <sstream>
#include <set>
#include <iostream>
#include <algorithm>
#include <vector>
#include <list>
#include <cassert>
#include <map>
#include <utility>

using namespace std;


struct Edge;
typedef list<Edge>::iterator EdgeIter;

struct Edge {
  int to;
  int cap;
  int flow;
  bool is_real;
  EdgeIter partner;
  
  Edge(int t, int c, bool real = true)
    : to(t), cap(c), flow(0), is_real(real)
  {};

  int residual() const
  {
    return cap - flow;
  }
};

struct Graph {
  list<Edge> *nbr;
  int num_nodes;
  Graph(int n)
    : num_nodes(n)
  {
    nbr = new list<Edge>[num_nodes];
  }

  ~Graph()
  {
    delete[] nbr;
  }

  // note: this routine adds an edge to the graph with the specified capacity,
  // as well as a residual edge.  There is no check on duplicate edge, so it
  // is possible to add multiple edges (and residual edges) between two
  // vertices
  void add_edge(int u,int v, int cap)
  {
    nbr[u].push_front(Edge(v, cap));
    nbr[v].push_front(Edge(u, 0, false));
    nbr[v].begin()->partner = nbr[u].begin();
    nbr[u].begin()->partner = nbr[v].begin();
  }
};

void push_path(Graph &G, int s, int t, const vector<EdgeIter> &path, int flow)
{
  for (int i = 0; s != t; i++) {
    if (path[i]->is_real) {
      path[i]->flow += flow;
      path[i]->partner->cap += flow;
    } else {
      path[i]->cap -= flow;
      path[i]->partner->flow -= flow;
    }
    s = path[i]->to;
  }
}

// the path is stored in a peculiar way for efficiency: path[i] is the
// i-th edge taken in the path.
int augmenting_path(const Graph &G, int s, int t, vector<EdgeIter> &path,
        vector<bool> &visited, int step = 0)
{
  if (s == t) {
    return -1;
  }
  for (EdgeIter it = G.nbr[s].begin(); it != G.nbr[s].end(); ++it) {
    int v = it->to;
    if (it->residual() > 0 && !visited[v]) {
      path[step] = it;
      visited[v] = true;
      int flow = augmenting_path(G, v, t, path, visited, step+1);
      if (flow == -1) {
  return it->residual();
      } else if (flow > 0) {
  return min(flow, it->residual());
      }
    }
  }
  return 0;
}

// note that the graph is modified
int network_flow(Graph &G, int s, int t)
{
  vector<bool> visited(G.num_nodes);
  vector<EdgeIter> path(G.num_nodes);
  int flow = 0, f;

  do {
    fill(visited.begin(), visited.end(), false);
    if ((f = augmenting_path(G, s, t, path, visited)) > 0) {
      push_path(G, s, t, path, f);
      flow += f;
    }
  } while (f > 0);
  
  return flow;
}
/*
int main(void)
{
  Graph G(100);
  int s, t, u, v, cap, flow;

  cin >> s >> t;
  while (cin >> u >> v >> cap) {
    G.add_edge(u, v, cap);
  }
  
  flow = network_flow(G, s, t);
  cout << "maximum flow = " << flow << endl;
  
  return 0;
}
*/

void Solver();

string str[1000][80];//Lines per Testcase by # of inputs. Inputs at 0,1 are resident and party 
map<string,int> partyInts,personInts,clubInts;//Gives each category an attached int to use in the graph
map<int,string> clubStrings;//for use in retreiving the string of the club by its int.
int numLines,numClubs;



int main()
{
  
	int testCases;
	cin>>testCases;
	cin.ignore(2);
	while(testCases--)
	{
     for(int l=0;l<1000;l++)
      for(int j=0;j<80;j++)
        str[l][j]="";

   istringstream ss;
   string temp;
    int i=0;
    numLines=numClubs=0;;

      int partyCounter=1001;
      int clubCounter = 2001;
      int personCounter= 1;
    while(1)
    { 
      
      getline(cin,temp);
      istringstream ss(temp);

      
      if(ss.str() == "")
      break;

      
  
             
      //Will create the following maps and associate a number with each unique string given
      ss>>str[i][0]>>str[i][1];
      if(personInts.find(str[i][0]) == personInts.end())
          personInts[str[i][0]]=personCounter++;

      if(partyInts.find(str[i][1]) == partyInts.end())
          partyInts[str[i][1]]=partyCounter++;

          int k = 2;
           while(ss >> str[i][k])
           {
            if(clubInts.find(str[i][k]) == clubInts.end())
                {
                  clubInts[str[i][k]]=clubCounter++;numClubs++;
                  clubStrings[clubCounter-1]=str[i][k];
                }
            k++;
           }
      i++;
      numLines++;
    }
    Solver();
    if(testCases>0)
    cout<<endl;
    partyInts.clear();
    personInts.clear();
    clubInts.clear();
	}
	return 0;
}

//Solver will use the str array for key's in the maps, each map has a string keyed to a int
//personmap is personName,1->1000
//Partymap is partyName,1001 -> 2000
//Clubmap is clubName,2000 +
//Ints are for handing to the Graph.
void Solver()
{
  Graph G(40000+2); //Max possible nodes in the graph
  set<int> partiesSeen,clubsSeen;
  int i=0,source=0,sink=40001;
  int cap = numClubs;


  if(numClubs%2)//if it is odd, 
   cap /= 2;
  else cap = (cap/2)-1;



  while (numLines--)//Create a edge for each party -> person  
  {
    if(!(partiesSeen.count(partyInts[str[i][1]])))
    {
      G.add_edge(source,partyInts[str[i][1]],cap);
      partiesSeen.insert(partyInts[str[i][1]]);
    }

    G.add_edge(partyInts[str[i][1]],personInts[str[i][0]],1);
    int k=2;
   
    //Each person to their club
    while(str[i][k] != "" && k < 80)
    {
      G.add_edge(personInts[str[i][0]],clubInts[str[i][k]],1);
      
      if(!(clubsSeen.count(clubInts[str[i][k]])))
      {
        G.add_edge(clubInts[str[i][k]],sink,1);
        clubsSeen.insert(clubInts[str[i][k]]);
      }
      k++;
    }
    i++;
  }
  
 // map<string,string> outputMap;
  if(numClubs <= network_flow(G, source, sink))
  { 
    //cout<<flow<<endl;//Should be 3 for test case
    for(int i=1;i<=personInts.size();i++)
    {    
     for(auto edge : G.nbr[i])//g.nbr is the i'th person, should pull up their edge to a club 
     {
        if(edge.is_real && edge.flow > 0)//This edge has is_real and has a flow to a club
       {
        cout<<str[i-1][0]<<" "<<clubStrings[edge.to]<<" "<<endl;
        }
      }
    }
  }
  else cout<<"Impossible."<<endl;


        //Need to find oput the person, then find out the club they are paired with?
        //The list of clubs will be in the string at str[i-1], then look up the 
        //clubStrings[clubint/edge.to] to get clubnam
}


/*
 * Network Flow
 *
 * Author: Howard Cheng
 *
 * The routine network_flow() finds the maximum flow that can be
 * pushed from the source (s) to the sink (t) in a flow network
 * (i.e. directed graph with capacities on the edges).  The maximum
 * flow is returned.  Note that the graph is modified.  If you wish to
 * recover the flow on an edge, it is in the "flow" field, as long as
 * is_real is set to true.
 *
 * Note: if you have an undirected network. simply call add_edge twice
 * with an edge in both directions (same capacity).  Note that 4 edges
 * will be added (2 real edges and 2 residual edges).  To discover the
 * actual flow between two vertices u and v, add up the flow of all
 * real edges from u to v and subtract all the flow of real edges from
 * v to u.  (In fact, for a residual edge the flow is always 0 in this
 * implementation.)
 *
 * This code can also be used for bipartite matching by setting up an
 * appropriate flow network.
 *
 * The code here assumes an adjacency list representation since most
 * problems requiring network flow have sparse graphs.
 *
 * This is the basic augmenting path algorithm and it is not the most
 * efficient.  But it should be good enough for most programming contest
 * problems.  The complexity is O(f m) where f is the size of the flow
 * and m is the number of edges.  This is good if you know that f
 * is small, but can be exponential if f is large.
 *
 */
